package com.example.userservice;

import com.example.userservice.dao.UserDAO;
import com.example.userservice.dao.UserDAOImpl;
import com.example.userservice.exception.*;
import com.example.userservice.model.User;
import com.example.userservice.util.UserValidator;
import lombok.extern.slf4j.Slf4j;
import lombok.RequiredArgsConstructor;

import java.util.List;
import java.util.Optional;
import java.util.Scanner;

@Slf4j
@RequiredArgsConstructor
public class Main {
    private static final Scanner scanner = new Scanner(System.in);
    private static final UserDAO userDAO = new UserDAOImpl();

    public static void main(String[] args) {
        log.info("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è");
        boolean running = true;

        while (running) {
            showMenu();
            String choice = scanner.nextLine().trim();
            log.debug("–í—ã–±—Ä–∞–Ω–æ –º–µ–Ω—é: {}", choice);

            switch (choice) {
                case "1" -> createUser();
                case "2" -> listUsers();
                case "3" -> findUser();
                case "4" -> updateUser();
                case "5" -> deleteUser();
                case "0" -> running = false;
                default -> {
                    log.warn("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –º–µ–Ω—é: {}", choice);
                    System.out.println("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
                }
            }
        }

        log.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è");
        System.out.println("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.");
    }

    private static void showMenu() {
        System.out.println("""
                
                ========== –ú–µ–Ω—é ==========
                1. –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                2. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                3. –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
                4. –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                5. –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                0. –í—ã—Ö–æ–¥
                ==========================
                –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
                """);
    }

    private static void createUser() {
        try {
            System.out.print("–ò–º—è: ");
            String name = scanner.nextLine().trim();

            System.out.print("Email: ");
            String email = scanner.nextLine().trim();

            System.out.print("–í–æ–∑—Ä–∞—Å—Ç: ");
            int age = Integer.parseInt(scanner.nextLine());

            log.debug("–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: name={}, email={}, age={}", name, email, age);

            //–≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            User user = User.builder()
                    .name(name)
                    .email(email)
                    .age(age)
                    .build();

            UserValidator.validateUser(user);
            userDAO.save(user);
            log.info("–°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID={}, email={}", user.getId(), user.getEmail());
            System.out.println("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: " + user);

        } catch (NumberFormatException e) {
            log.warn("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç: {}", e.getMessage());
            System.out.println("‚ùå –û—à–∏–±–∫–∞: –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º");
        } catch (UserValidationException e) {
            log.warn("–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {}", e.getMessage());
            System.out.println("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: " + e.getMessage());
        } catch (UserAlreadyExistsException e) {
            log.warn("–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", e.getMessage());
            System.out.println("‚ùå –û—à–∏–±–∫–∞: " + e.getMessage());
        } catch (DatabaseOperationException e) {
            log.error("–û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", e);
            System.out.println("‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: " + e.getMessage());
        } catch (Exception e) {
            log.error("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", e);
            System.out.println("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: " + e.getMessage());
        }
    }

    private static void listUsers() {
        try {
            List<User> users = userDAO.findAll();
            if (users.isEmpty()) {
                log.info("–ó–∞–ø—Ä–æ—à–µ–Ω —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –±–∞–∑–∞ –ø—É—Å—Ç–∞");
                System.out.println("‚ÑπÔ∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.");
            } else {
                log.info("–ü–æ–ª—É—á–µ–Ω–æ {} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", users.size());
                System.out.println("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:");
                users.forEach(System.out::println);
            }
        } catch (DatabaseOperationException e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", e);
            System.out.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: " + e.getMessage());
        }
    }

    private static void findUser() {
        try {
            System.out.print("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ");
            Long id = Long.parseLong(scanner.nextLine());
            log.debug("–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID: {}", id);

            Optional<User> user = userDAO.findById(id);
            if (user.isPresent()) {
                log.info("–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID={}", id);
                System.out.println("–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " + user.get());
            } else {
                log.warn("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: ID={}", id);
                System.out.println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            }
        } catch (NumberFormatException e) {
            log.warn("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID", e);
            System.out.println("‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID");
        } catch (DatabaseOperationException e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", e);
            System.out.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + e.getMessage());
        }
    }


    private static void updateUser() {
        try {
            System.out.print("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ");
            Long id = Long.parseLong(scanner.nextLine());
            log.debug("–ó–∞–ø—Ä–æ—à–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ID={}", id);

            User user = userDAO.findById(id)
                    .orElseThrow(() -> new UserNotFoundException(id));

            System.out.print("–ù–æ–≤–æ–µ –∏–º—è (" + user.getName() + "): ");
            String name = scanner.nextLine();
            if (!name.isBlank()) {
                user.setName(name.trim());
                log.debug("–û–±–Ω–æ–≤–ª–µ–Ω–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID={}", id);
            }

            System.out.print("–ù–æ–≤—ã–π email (" + user.getEmail() + "): ");
            String email = scanner.nextLine();
            if (!email.isBlank()) {
                user.setEmail(email.trim());
                log.debug("–û–±–Ω–æ–≤–ª–µ–Ω email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID={}", id);
            }

            System.out.print("–ù–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç (" + user.getAge() + "): ");
            String ageStr = scanner.nextLine();
            if (!ageStr.isBlank()) {
                user.setAge(Integer.parseInt(ageStr));
                log.debug("–û–±–Ω–æ–≤–ª–µ–Ω –≤–æ–∑—Ä–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID={}", id);
            }

            UserValidator.validateUser(user);
            userDAO.update(user);
            System.out.println("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω: " + user);
            log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω: ID={}", id);

        } catch (NumberFormatException e) {
            log.warn("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏", e);
            System.out.println("‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ");
        } catch (UserValidationException e) {
            log.warn("–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏", e);
            System.out.println("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: " + e.getMessage());
        } catch (UserNotFoundException e) {
            log.warn("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏", e);
            System.out.println("‚ùå –û—à–∏–±–∫–∞: " + e.getMessage());
        } catch (DatabaseOperationException e) {
            log.error("–û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", e);
            System.out.println("‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: " + e.getMessage());
        }
    }

    private static void deleteUser() {
        try {
            System.out.print("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ");
            Long id = Long.parseLong(scanner.nextLine());
            log.debug("–ó–∞–ø—Ä–æ—à–µ–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ID={}", id);

            User user = userDAO.findById(id)
                    .orElseThrow(() -> new UserNotFoundException(id));

            userDAO.delete(user);
            log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω: ID={}, name={}", id, user.getName());
            System.out.println("üóë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω: " + user.getName());

        } catch (NumberFormatException e) {
            log.warn("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", e);
            System.out.println("‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID");
        } catch (UserNotFoundException e) {
            log.warn("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", e);
            System.out.println("‚ùå –û—à–∏–±–∫–∞: " + e.getMessage());
        } catch (DatabaseOperationException e) {
            log.error("–û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", e);
            System.out.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + e.getMessage());
        }
    }
}
